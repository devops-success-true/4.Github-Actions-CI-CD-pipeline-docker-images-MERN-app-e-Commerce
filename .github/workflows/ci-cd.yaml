name: ci-cd

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

env:
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/mern-frontend
  BACKEND_IMAGE:  ${{ secrets.DOCKERHUB_USERNAME }}/mern-backend
  REACT_APP_BASE_URL: ${{ vars.REACT_APP_BASE_URL }}

jobs:
  quality_checks:
    name: Lint + SonarCloud + Security
    runs-on: ubuntu-latest
    environment: 4.MERN_CI_CD-Pipeline
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # Backend
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - name: Install backend deps
        working-directory: backend
        run: npm ci

      # ESLint disabled intentionally (no flat config in repo)
      # - name: ESLint backend
      #   working-directory: backend
      #   run: npx eslint . --ext .js,.jsx --max-warnings=0

      - name: Prettier backend (non-blocking)
        working-directory: backend
        run: npx prettier --check .
        continue-on-error: true

      # Frontend
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend deps
        working-directory: frontend
        run: npm ci --legacy-peer-deps

      # ESLint disabled intentionally (no flat config in repo)
      # - name: ESLint frontend
      #   working-directory: frontend
      #   run: npx eslint . --ext .js,.jsx --max-warnings=0

      - name: Prettier frontend (non-blocking)
        working-directory: frontend
        run: npx prettier --check .
        continue-on-error: true

      # NOTE: This requires SonarCloud Automatic Analysis to be DISABLED for the project.
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}
        with:
          args: -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }} -Dsonar.organization=${{ vars.SONAR_ORG }} -Dsonar.sources=backend,frontend -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/** -Dsonar.pullrequest.provider=github -Dsonar.qualitygate.wait=true

      - name: Trivy FS scan (advisory)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          vuln-type: os,library
          format: table
          exit-code: '0'
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          skip-dirs: node_modules
        continue-on-error: true

  build_push_backend:
    name: Build & Push Backend
    runs-on: ubuntu-latest
    needs: [quality_checks]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Buildx (docker-container)
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta (backend)
        id: meta_be
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BACKEND_IMAGE }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build & Push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
          tags: ${{ steps.meta_be.outputs.tags }}
          labels: ${{ steps.meta_be.outputs.labels }}
          cache-from: type=gha,scope=backend-${{ github.ref_name }}
          cache-to:   type=gha,mode=max,scope=backend-${{ github.ref_name }}

      - name: Trivy Image (backend, advisory)
        if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          format: table
          exit-code: '0'
          ignore-unfixed: true
          severity: HIGH,CRITICAL
        continue-on-error: true

  build_push_frontend:
    name: Build & Push Frontend
    runs-on: ubuntu-latest
    needs: [quality_checks]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Buildx (docker-container)
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta (frontend)
        id: meta_fe
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FRONTEND_IMAGE }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build & Push frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./frontend/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
          tags: ${{ steps.meta_fe.outputs.tags }}
          labels: ${{ steps.meta_fe.outputs.labels }}
          build-args: |
            REACT_APP_BASE_URL=${{ env.REACT_APP_BASE_URL }}
          cache-from: type=gha,scope=frontend-${{ github.ref_name }}
          cache-to:   type=gha,mode=max,scope=frontend-${{ github.ref_name }}

      - name: Trivy Image (frontend, advisory)
        if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          format: table
          exit-code: '0'
          ignore-unfixed: true
          severity: HIGH,CRITICAL
        continue-on-error: true
