name: ci-cd  # Workflow name in GitHub Actions

on:
  push:
    branches: [ main ]         # Only run on pushes to main
  pull_request:
    branches: [ main ]         # Also run on PRs into main

env:
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/mern-frontend  # Docker Hub repo for frontend
  BACKEND_IMAGE:  ${{ secrets.DOCKERHUB_USERNAME }}/mern-backend   # Docker Hub repo for backend
  REACT_APP_BASE_URL: /api  # Will be baked into frontend build

jobs:

  ### 1. Code Quality & Security Checks ###
  quality_checks:
    name: Lint + Sonar + Security
    runs-on: [self-hosted, linux, x64, docker]
    steps:
      - uses: actions/checkout@v4   # Checkout repo
        with:
          fetch-depth: 0            # Sonar prefers full history for blame/PR decoration

      # --- Backend Lint / Format ---
      - name: Setup Node for backend
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json

      - name: Install backend deps
        working-directory: backend
        run: npm ci

      - name: ESLint backend
        working-directory: backend
        run: npx eslint . --ext .js,.jsx --max-warnings=0  # fail on warnings

      - name: Prettier backend
        working-directory: backend
        run: npx prettier --check .

      # --- Frontend Lint / Format ---
      - name: Setup Node for frontend
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend deps
        working-directory: frontend
        run: npm ci --legacy-peer-deps

      - name: ESLint frontend
        working-directory: frontend
        run: npx eslint . --ext .js,.jsx --max-warnings=0

      - name: Prettier frontend
        working-directory: frontend
        run: npx prettier --check .

      # --- SonarQube / SonarCloud scan ---
      # If you're using SonarCloud, set SONAR_HOST_URL to https://sonarcloud.io
      # Required secrets/vars:
      #   secrets.SONAR_TOKEN (token from SonarQube/SonarCloud)
      #   vars.SONAR_PROJECT_KEY (e.g., mern-app)
      #   vars.SONAR_ORG (SonarCloud org key) - optional for self-hosted SonarQube
      #   secrets.SONAR_HOST_URL (e.g., https://sonarcloud.io or your SonarQube URL)
      - name: Sonar Scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ vars.SONAR_ORG }}
            -Dsonar.sources=backend,frontend
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
            -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info

      # --- Static Security Scan (filesystem) ---
      - name: Trivy FS scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          format: table
          exit-code: '1'           # fail on HIGH/CRITICAL vulns
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          skip-dirs: node_modules

  ### 2. Backend Build & Push ###
  build_push_backend:
    name: Build & Push Backend
    runs-on: [self-hosted, linux, x64, docker]
    needs: [quality_checks]   # only runs if quality job passes
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta backend
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BACKEND_IMAGE }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build & Push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- Image scan ---
      - name: Trivy Image backend
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          format: table
          exit-code: '1'
          ignore-unfixed: true
          severity: HIGH,CRITICAL

  ### 3. Frontend Build & Push ###
  build_push_frontend:
    name: Build & Push Frontend
    runs-on: [self-hosted, linux, x64, docker]
    needs: [quality_checks]
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta frontend
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FRONTEND_IMAGE }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build & Push frontend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            REACT_APP_BASE_URL=${{ env.REACT_APP_BASE_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- Image scan ---
      - name: Trivy Image frontend
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          format: table
          exit-code: '1'
          ignore-unfixed: true
          severity: HIGH,CRITICAL

  ### 4. Deploy ###
  deploy:
    name: Deploy to VM
    runs-on: [self-hosted, linux, x64, docker]
    needs: [build_push_backend, build_push_frontend]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          printf "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

      - name: Deploy via SSH
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ssh -p "${{ secrets.VM_SSH_PORT }}" "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}" bash -lc '
            set -e
            cd ~/sourcecode
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            export DOCKERHUB_USERNAME="$DOCKERHUB_USERNAME"
            export IMAGE_TAG="'$IMAGE_TAG'"
            docker compose -f docker-compose.prod.yaml pull
            docker compose -f docker-compose.prod.yaml up -d --remove-orphans
            docker image prune -f
          '

