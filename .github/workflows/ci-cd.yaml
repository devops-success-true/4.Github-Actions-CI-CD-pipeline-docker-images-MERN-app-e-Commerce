name: ci-cd

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/mern-frontend
  BACKEND_IMAGE:  ${{ secrets.DOCKERHUB_USERNAME }}/mern-backend
  REACT_APP_BASE_URL: ${{ vars.REACT_APP_BASE_URL }}

jobs:
  quality_checks:
    name: Lint + Sonar + Security
    runs-on: [self-hosted, linux, x64, docker]
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # Backend
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - name: Install backend deps
        working-directory: backend
        run: npm ci
      - name: ESLint backend
        working-directory: backend
        run: npx eslint . --ext .js,.jsx --max-warnings=0
      - name: Prettier backend
        working-directory: backend
        run: npx prettier --check .

      # Frontend
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend deps
        working-directory: frontend
        run: npm ci --legacy-peer-deps
      - name: ESLint frontend
        working-directory: frontend
        run: npx eslint . --ext .js,.jsx --max-warnings=0
      - name: Prettier frontend
        working-directory: frontend
        run: npx prettier --check .

      # Optional Sonar
      - name: Sonar Scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ vars.SONAR_ORG }}
            -Dsonar.sources=backend,frontend
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
            -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info

      - name: Trivy FS scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          format: table
          exit-code: '1'
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          skip-dirs: node_modules

  build_push_backend:
    name: Build & Push Backend
    runs-on: [self-hosted, linux, x64, docker]
    needs: [quality_checks]
    steps:
      - uses: actions/checkout@v4

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta (backend)
        id: meta_be
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BACKEND_IMAGE }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build & Push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta_be.outputs.tags }}
          labels: ${{ steps.meta_be.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trivy Image (backend)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          format: table
          exit-code: '1'
          ignore-unfixed: true
          severity: HIGH,CRITICAL

  build_push_frontend:
    name: Build & Push Frontend
    runs-on: [self-hosted, linux, x64, docker]
    needs: [quality_checks]
    steps:
      - uses: actions/checkout@v4

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta (frontend)
        id: meta_fe
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FRONTEND_IMAGE }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build & Push frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta_fe.outputs.tags }}
          labels: ${{ steps.meta_fe.outputs.labels }}
          build-args: |
            REACT_APP_BASE_URL=${{ env.REACT_APP_BASE_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trivy Image (frontend)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          format: table
          exit-code: '1'
          ignore-unfixed: true
          severity: HIGH,CRITICAL

  deploy:
    name: Deploy to VM
    runs-on: [self-hosted, linux, x64, docker]
    needs: [build_push_backend, build_push_frontend]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Prepare SSH & config
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.ssh"
          echo "${{ secrets.VM_SSH_KEY }}" > "$HOME/.ssh/id_rsa"
          chmod 600 "$HOME/.ssh/id_rsa"
          printf "Host *\n\tStrictHostKeyChecking no\n" > "$HOME/.ssh/config"
          chmod 600 "$HOME/.ssh/config"

      # Create backend.env LOCALLY using step env vars, then upload
      - name: Create backend.env (local)
        shell: bash
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          EMAIL:     ${{ secrets.EMAIL }}
          PASSWORD:  ${{ secrets.PASSWORD }}
          ORIGIN:    ${{ secrets.ORIGIN }}

          LOGIN_TOKEN_EXPIRATION:           ${{ vars.LOGIN_TOKEN_EXPIRATION }}
          OTP_EXPIRATION_TIME:              ${{ vars.OTP_EXPIRATION_TIME }}
          PASSWORD_RESET_TOKEN_EXPIRATION:  ${{ vars.PASSWORD_RESET_TOKEN_EXPIRATION }}
          COOKIE_EXPIRATION_DAYS:           ${{ vars.COOKIE_EXPIRATION_DAYS }}
          PRODUCTION:                        ${{ vars.PRODUCTION }}
          PORT:                              ${{ vars.PORT }}
        run: |
          set -euo pipefail
          mkdir -p sourcecode
          {
            echo "MONGO_URI=${MONGO_URI}"
            echo "SECRET_KEY=${SECRET_KEY}"
            echo "EMAIL=${EMAIL}"
            echo "PASSWORD=${PASSWORD}"
            echo "ORIGIN=${ORIGIN}"
            echo "LOGIN_TOKEN_EXPIRATION=${LOGIN_TOKEN_EXPIRATION}"
            echo "OTP_EXPIRATION_TIME=${OTP_EXPIRATION_TIME}"
            echo "PASSWORD_RESET_TOKEN_EXPIRATION=${PASSWORD_RESET_TOKEN_EXPIRATION}"
            echo "COOKIE_EXPIRATION_DAYS=${COOKIE_EXPIRATION_DAYS}"
            echo "PRODUCTION=${PRODUCTION}"
            echo "PORT=${PORT}"
          } > sourcecode/backend.env

      - name: Upload backend.env to VM
        shell: bash
        run: |
          set -euo pipefail
          rsync -e "ssh -p ${{ secrets.VM_SSH_PORT }}" -av sourcecode/ "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/sourcecode/"

      - name: Deploy via SSH
        shell: bash
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN:    ${{ secrets.DOCKERHUB_TOKEN }}
          IMAGE_TAG:          ${{ github.sha }}
        run: |
          set -euo pipefail
          ssh -p "${{ secrets.VM_SSH_PORT }}" "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}" bash -lc "
            set -e
            cd ~/sourcecode
            echo '${DOCKERHUB_TOKEN}' | docker login -u '${DOCKERHUB_USERNAME}' --password-stdin
            export DOCKERHUB_USERNAME='${DOCKERHUB_USERNAME}'
            export IMAGE_TAG='${IMAGE_TAG}'
            docker compose -f docker-compose.prod.yaml pull
            docker compose -f docker-compose.prod.yaml up -d --remove-orphans
            docker image prune -f
          "
